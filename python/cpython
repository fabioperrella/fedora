#to get official repository
hg clone https://hg.python.org/cpython

#to be a core developer
https://docs.python.org/devguide/coredev.html
https://www.python.org/dev/peps/pep-0007/
https://www.python.org/dev/buildbot/
http://buildbot.python.org/all/waterfall?category=2.7.stable
https://docs.python.org/devguide/communication.html
https://www.python.org/psf/contrib/
https://docs.python.org/devguide/faq.html#faq
http://pythonmentors.com

#to be a doc helper
https://docs.python.org/devguide/documenting.html

#we want to contribute test code to src cpython
https://docs.python.org/devguide/runtests.html

#install deps to run cpyton
yum install g++ gcc-c++ clang

#run this test first
chmod +x configure
./configure --with-pydebug && make -j2
./python -m test
./python -m test -h
./python -m test -v test_abc
./python -m unittest -v test.test_abc.TestABC
./python -m test -j0
./python -bb -E -Wd -m test -r -w -uall
./python Tools/scripts/run_tests.py
make test

#in some moment anything is wrong, run it
make clean

#writing tests to cpython
Tests live in the Lib/test directory, where every file that includes tests has a test_ prefix.

#tmate - to access remote ssh pc
yum install tmate
tmate show-messages

#py.test
py.test tests/test_user_agent.py 
py.test tests/features/views/user/test_external_password_recovery.py
py.test test_base.py -k TestBackend.check_password #para testar metodo
py.test test_base.py -s TestBackend.check_password #para usar ipdb

#buildbot python
http://buildbot.python.org/all/waterfall


Mercurial for git developers
resorces:
https://mercurial.selenic.com/wiki/UnderstandingMercurial
http://hgbook.red-bean.com/read/
$ man hg
commands:
#show status of current branch
hg status
#show branch
hg branch
#show a branch list
hg branches -a
#its like git pull
hg pull
hg update
hg log
#change the branch without commit changes
hg checkout 2.7 --clean
#submit a patch to cpython hg
https://docs.python.org/devguide/patch.html
Mercurial allows for various workflows according to each person’s or project’s preference. It is out of this guide’s scope to present them all, so we will stick to a basic workflow where you work on a patch in your working copy without ever making any local commits.
If you use this workflow, and your work adds or removes files to the source tree, you will have to temporarily hg add or hg remove them, respectively, before generating a patch.
To generate a patch, just invoke hg diff which will print out a patch of the working copy’s changes against the current revision:
hg diff > mywork.patch
If you want to undo your changes, you can revert them from the working copy:
hg revert -a
You can later re-apply the changes if you want to continue working on the patch:
hg import --no-commit mywork.patch


Mercurial for git developers

resorces:
https://mercurial.selenic.com/wiki/UnderstandingMercurial
http://hgbook.red-bean.com/read/
$ man hg

commands:
#show status of current branch
hg status

#show branch
hg branch

#show a branch list
hg branches -a

#its like git pull
hg pull
hg update
hg log

#change the branch without commit changes
hg checkout 2.7 --clean
 
#submit a patch to cpython hg
https://docs.python.org/devguide/patch.html

Mercurial allows for various workflows according to each person’s or project’s preference. It is out of this guide’s scope to present them all, so we will stick to a basic workflow where you work on a patch in your working copy without ever making any local commits.
If you use this workflow, and your work adds or removes files to the source tree, you will have to temporarily hg add or hg remove them, respectively, before generating a patch.
To generate a patch, just invoke hg diff which will print out a patch of the working copy’s changes against the current revision:
hg diff > mywork.patch

If you want to undo your changes, you can revert them from the working copy:
hg revert -a

You can later re-apply the changes if you want to continue working on the patch:
hg import --no-commit mywork.patch

